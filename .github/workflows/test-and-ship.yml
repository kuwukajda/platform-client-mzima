name: Test & Ship

on:
- push
- pull_request

env:
  CYPRESS_PROJECT_ID: "43gftm"

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    ## While tests are not fixed
    continue-on-error: true

    strategy:
      matrix:
        node_version:
          - "14"
          - "16"
        include:
        - node_version: "14"
          run_lint_tests: "True"

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node_version }}

    - name: Get npm cache directory
      id: npm-cache-dir
      run: |
        echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT

    - uses: actions/cache@v3
      id: npm-cache
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: |
        set -e;
        npm install;

    - name: List installed dependencies
      run: |
        npm ls || true;

    - name: Run lint tests
      if: ${{ matrix.run_lint_tests }}
      run: |
        npm run lint;

    # TBD: we need to make tests runnable in a CI environment
    #      currently Karma doesn't finish
    # - name: Run tests
    #   run: |
    #     npm run test;

  e2e-test:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: true

    steps:
      - uses: actions/checkout@v3
  
      ## set up API endpoint
      - name: Setup API endpoint
        run: |
          echo 'BACKEND_URL=https://e2e-laboratory-api.staging.ush.zone' > .env
  
      ## same as above step
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
  
      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
    
      - uses: actions/cache@v3
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
  
      - name: Install dependencies
        run: npm install;
  
      - name: Run server
        run: |
          npm run web:serve &
  
      - name: Wait until the front-end is ready
        run: |
          retry() {
            local -r -i max_attempts="$1"; shift
            local -r cmd="$@"
            local -i attempt_num=1
  
            until $cmd
            do
                if (( attempt_num == max_attempts ))
                then
                    echo "Attempt $attempt_num failed and there are no more attempts left!"
                    return 1
                else
                    echo "Attempt $attempt_num failed! Trying again in $attempt_num seconds..."
                    sleep $(( attempt_num++ ))
                fi
            done;
          }
  
          server='http://localhost:4200'
          retry 60 timeout 1 curl --silent ${server}/index.html || { echo "Failed getting index.html!" && exit 1; }
  
      # - name: Patch cypress config
      #   run: |
      #     cd e2e-testing
      #     jq '{"projectId": "'${CYPRESS_PROJECT_ID}'"}' > cypress.config.js
      #     jq '.baseUrl="http://localhost:4200/"' <<<$(cat cypress.env.json) > cypress.env.json
  
      - name: Cypress run
        uses: cypress-io/github-action@v5
  
        with:
          browser: chrome
          # install-command: npm install
          record: true
          parallel: true
          working-directory: e2e-testing
          start: npm start
  
        env:
            CYPRESS_ush_admin_email: "${{secrets.e2e_ush_admin_email}}"
            CYPRESS_ush_admin_pwd: "${{secrets.e2e_ush_admin_pwd}}"
            CYPRESS_ush_user_name: "${{secrets.e2e_ush_user_name}}"
            CYPRESS_ush_user_email: "${{secrets.e2e_ush_user_email}}"
            CYPRESS_ush_user_pwd: "${{secrets.e2e_ush_user_pwd}}"
            CYPRESS_RECORD_KEY: ${{ secrets.E2E_CYPRESS_RECORD_KEY }}
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  ship:
    needs: [ test, e2e-test ]
    if: github.event_name == 'push'   # not on PRs
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Login to AWS Container Registry
      uses: docker/login-action@v1
      with:
        registry: 513259414768.dkr.ecr.eu-west-1.amazonaws.com

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: |
          513259414768.dkr.ecr.eu-west-1.amazonaws.com/platform-client-mzima
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=sha

    - name: Build and push to Amazon ECR
      uses: docker/build-push-action@v2
      with:
        pull: true
        push: ${{ github.event_name != 'pull_request' }}
        labels: ${{ steps.meta.outputs.labels }}
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
