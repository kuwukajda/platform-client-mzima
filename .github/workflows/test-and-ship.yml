name: Test & Ship

on:
- push
- pull_request

env:
  DEFAULT_NODE_VERSION: "16"

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    ## While tests are not fixed
    continue-on-error: true

    strategy:
      matrix:
        node_version:
          - "14"
          - "16"
          - "18"
        include:
        - node_version: "16"    # update along with DEFAULT_NODE_VERSION
          run_lint_tests: "True"

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node_version }}

    - name: Get npm cache directory
      id: npm-cache-dir
      run: |
        echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT

    - uses: actions/cache@v3
      id: npm-cache
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: |
        set -e;
        npm install;

    - name: List installed dependencies
      run: |
        npm ls || true;

    - name: Run lint tests
      if: ${{ matrix.run_lint_tests }}
      run: |
        npm run lint;

    # TBD: we need to make tests runnable in a CI environment
    #      currently Karma doesn't finish
    # - name: Run tests
    #   run: |
    #     npm run test;

  ship:
    needs: [ test ]
    if: github.event_name == 'push'   # not on PRs
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Login to AWS Container Registry
      uses: docker/login-action@v1
      with:
        registry: 513259414768.dkr.ecr.eu-west-1.amazonaws.com

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: |
          513259414768.dkr.ecr.eu-west-1.amazonaws.com/platform-client-mzima
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=sha

    - name: Build and push to Amazon ECR
      uses: docker/build-push-action@v2
      with:
        pull: true
        push: ${{ github.event_name != 'pull_request' }}
        labels: ${{ steps.meta.outputs.labels }}
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  gh-release:
    needs: [ test ]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.DEFAULT_NODE_VERSION }}

      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          set -e;
          npm install;

      - name: prod build
        id: bin_build
        run: | 
          npm run web:build;
          FILENAME="platform-client-mzima-${GITHUB_REF##*/}-bin.tar.gz"
          tar -czv -f ${FILENAME} -C dist/apps/web-mzima-client/ . ;
          rm -fr dist/apps/web-mzima-client;
          echo "tarball=${FILENAME}" >> "$GITHUB_OUTPUT"

      - name: dev build
        id: bindev_build
        run: | 
          npm run web:devbuild;
          FILENAME="platform-client-mzima-${GITHUB_REF##*/}-bin-dev.tar.gz" ;
          tar -czv -f ${FILENAME} -C dist/apps/web-mzima-client/ . ;
          rm -fr dist/apps/web-mzima-client;
          echo "tarball=${FILENAME}" >> "$GITHUB_OUTPUT"

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: |
            ${{steps.bin_build.outputs.tarball}}
            ${{steps.bindev_build.outputs.tarball}}